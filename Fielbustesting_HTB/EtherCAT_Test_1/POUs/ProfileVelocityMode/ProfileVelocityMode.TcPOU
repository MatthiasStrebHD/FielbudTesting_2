<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ProfileVelocityMode" Id="{9b8ee364-7eda-413a-b68c-be20daa04730}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ProfileVelocityMode
VAR_INPUT
	sNetID					: T_AmsNetId;
	nSlaveAddr				: UINT;
END_VAR
VAR_OUTPUT
	bSuccess				: BOOL;
	bBusy					: BOOL;
	nTargetVelocityAfterLimit: DINT;
END_VAR
VAR_IN_OUT
	bSetVelocity			: BOOL;
	nTargetVelocity			: DINT;
END_VAR
VAR
	eMotionState			: (WAIT_FOR_TRIGGER, ENABLE_DEVICE, WAIT_FOR_NEW_VELOCITY, SET_LIMIT, SET_VELOCITY, VALIDATE_VELOCITY, ACKNOWLEDGE_VELOCITY);
	fbEnableDevice			: FB_EnableDevice;
	fbSetProfileVelocity			: FB_EcCoeSdoWrite;
	fbGetStatusword			: FB_EcCoeSdoRead;
	fbGetVelocityLimitMin	: FB_EcCoeSdoRead;
	fbGetVelocityLimitMax	: FB_EcCoeSdoRead;
	fbGetVelocityDemand		: FB_EcCoeSdoRead;
	tWait					: TON;
	tWait2					: TON;
	nStatusword				: UINT;
	bGetStatusword			: BOOL;
	bExecuteWait			: BOOL;
	bWriteToFB				: BOOL;
	fFlag		 			: F_TRIG;
	nVelocityBuff			: DINT := 0;
	nVelocityDemand			: DINT;
	fbReadVelocityLimits1	: FB_EcCoeSdoRead;
	fbReadVelocityLimits2	: FB_EcCoeSdoRead;
	bLimitActive			: BOOL;
	nVelocityLimitMin		: DINT;
	nVelocityLimitMax		: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL.bReset THEN
	GVL.bReset := FALSE;
	bSuccess := FALSE;
	nVelocityBuff := 0;
	eMotionState := WAIT_FOR_TRIGGER;
END_IF

ReadLimits();
bBusy := TRUE; //FB VelocityMode is busy and the target velocity is not jet set

fbSetProfileVelocity(sNetId := sNetID,
			nSlaveAddr := nSlaveAddr,
			nSubIndex := 0,
			nIndex := 16#60FF,
			pSrcBuf := ADR(nVelocityBuff),
			cbBufLen := SIZEOF(nVelocityBuff),
			bExecute := bWriteToFB);
				
	
// state machine				
CASE eMotionState OF
	WAIT_FOR_TRIGGER:
		MAIN.Controlword := 0;
		IF bSetVelocity THEN
			ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Enable Device',
				strArg := '');
			eMotionState := ENABLE_DEVICE;
		END_IF	

	ENABLE_DEVICE:
		fbEnableDevice (bTrigger := bSetVelocity,
						bSuccess => bSuccess,
						sNetId := sNetId,
						nSlaveAddr := nSlaveAddr);
		IF fbEnableDevice.bFinished THEN
			IF NOT bSuccess THEN
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Device not successfully enabled',
					strArg := '');
				eMotionState := WAIT_FOR_TRIGGER;
			ELSE
				eMotionState := WAIT_FOR_NEW_VELOCITY; 
			END_IF
		END_IF
		
		
	WAIT_FOR_NEW_VELOCITY:
		IF nTargetVelocity <> nVelocityBuff THEN
			eMotionState := SET_VELOCITY;
		ELSE
			bSetVelocity := FALSE;
			bBusy := FALSE; //FB 
		END_IF
		
	SET_VELOCITY:
		//set velocity
		bWriteToFB := TRUE;
		fFlag(CLK := fbSetProfileVelocity.bBusy); 		
		
		IF fbSetProfileVelocity.bError THEN
			//Error when setting Target Velocity
			bSuccess := FALSE;
			bWriteToFB := FALSE;
			ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Error in set velocity',
				strArg := '');
			eMotionState := WAIT_FOR_TRIGGER;
		END_IF
		
		IF fFlag.Q THEN
			eMotionState := VALIDATE_VELOCITY;
		END_IF
		
		
	VALIDATE_VELOCITY:
		bGetStatusword := TRUE;
		fbGetStatusword(sNetId := sNetId,
			nSlaveAddr := nSlaveAddr,
			nIndex := 16#6041,
			nSubIndex := 0,
			pDstBuf := ADR(nStatusword),
			cbBufLen := SIZEOF(nStatusword),
			bExecute := bGetStatusword);
		fFlag(CLK := fbGetStatusword.bBusy);
		IF fFlag.Q THEN
			IF nStatusword.4 THEN
//				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
//				msgFmtStr := 'Velocity is valid',
//				strArg := '');
			ELSE 
				bSuccess := FALSE;
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Error when validating velocity. Controlword not set.',
					strArg := '');
			END_IF
			fbGetStatusword(bExecute := FALSE);
			bWriteToFB := FALSE;
			eMotionState := WAIT_FOR_NEW_VELOCITY;
		END_IF
		
END_CASE

]]></ST>
    </Implementation>
    <Method Name="ReadLimits" Id="{c886781f-6811-479a-8ca8-ca0679173889}">
      <Declaration><![CDATA[METHOD ReadLimits : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbReadVelocityLimits1(nSlaveAddr := GVL.nSlaveAddr,
			nIndex := 16#6046,
			nSubindex := 1, //v_min
			pDstBuf := ADR(nVelocityLimitMin),
			cbBufLen := SIZEOF(nVelocityLimitMin),
			bExecute := TRUE);
	
	fbReadVelocityLimits2(sNetId := GVL.sNetId,
			nSlaveAddr := GVL.nSlaveAddr,
			nIndex := 16#6046,
			nSubindex := 2, //v_max
			pDstBuf := ADR(nVelocityLimitMax),
			cbBufLen := SIZEOF(nVelocityLimitMax),
			bExecute := TRUE);
			
IF NOT fbReadVelocityLimits1.bBusy AND NOT fbReadVelocityLimits2.bBusy THEN
	fbReadVelocityLimits1(bExecute := FALSE); 
	fbReadVelocityLimits2(bExecute := FALSE); 
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ProfileVelocityMode">
      <LineId Id="1701" Count="53" />
      <LineId Id="1781" Count="42" />
      <LineId Id="1825" Count="5" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="ProfileVelocityMode.ReadLimits">
      <LineId Id="6" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>