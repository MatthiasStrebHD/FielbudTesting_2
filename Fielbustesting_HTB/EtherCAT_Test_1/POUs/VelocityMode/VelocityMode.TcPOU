<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="VelocityMode" Id="{f4a4aaf5-5fd1-488f-adcc-e224a9bd5f8a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK VelocityMode
VAR_INPUT
	sNetID					: T_AmsNetId;
	nSlaveAddr				: UINT;
	nTargetVelocity			: DINT;
END_VAR
VAR_OUTPUT
	bSuccess				: BOOL;
END_VAR
VAR_IN_OUT
	bSetVelocity			: BOOL;
END_VAR
VAR
	eMotionState			: (WAIT_FOR_TRIGGER, ENABLE_DEVICE, SET_LIMIT, SET_VELOCITY, VALIDATE_VELOCITY, ACKNOWLEDGE_VELOCITY);
	fbEnableDevice			: FB_EnableDevice;
	fbSetVelocity			: FB_EcCoeSdoWrite;
	fbGetStatusword			: FB_EcCoeSdoRead;
	fbGetVelocityLimitMin	: FB_EcCoeSdoRead;
	fbGetVelocityLimitMax	: FB_EcCoeSdoRead;
	tWait					: TON;
	tWait2					: TON;
	nStatusword				: UINT;
	bGetStatusword			: BOOL;
	bExecuteWait			: BOOL;
	bWriteToFB				: BOOL;
	fFlag		 			: F_TRIG;
	nVelocityLimitMin		: DINT;
	nVelocityLimitMax		: DINT;
	bGetVelocityLimitMin	: BOOL;
	bGetVelocityLimitMax	: BOOL;
	fMinFlag				: F_TRIG;
	fMaxFlag				: F_TRIG;
	bNextStep				: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE eMotionState OF
	WAIT_FOR_TRIGGER:
		MAIN.Controlword := 0;
		IF bSetVelocity THEN
			ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Enable Device',
				strArg := '');
			eMotionState := ENABLE_DEVICE;
		END_IF	

	ENABLE_DEVICE:
		fbEnableDevice (bTrigger := bSetVelocity,
						bSuccess => bSuccess,
						sNetId := sNetId,
						nSlaveAddr := nSlaveAddr);
		IF fbEnableDevice.bFinished THEN
			IF NOT bSuccess THEN
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Device not successfully enabled',
					strArg := '');
				eMotionState := WAIT_FOR_TRIGGER;
			ELSE
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Device successfully enabled',
					strArg := '');
				eMotionState := SET_LIMIT; 
			END_IF
		END_IF
		
	SET_LIMIT:
		bGetVelocityLimitMax := TRUE;
		fMinFlag(CLK := fbGetVelocityLimitMin.bBusy);
		fMaxFlag(CLK := fbGetVelocityLimitMax.bBusy);
		
		fbGetVelocityLimitMax(sNetId := sNetID,
					nSlaveAddr := nSlaveAddr,
					nSubIndex := 2, //v_max
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMax),
					cbBufLen := SIZEOF(nVelocityLimitMax),
					bExecute := bGetVelocityLimitMax);
		// set limits
		IF fMaxFlag.Q THEN
			bGetVelocityLimitMin := TRUE;
		END_IF		
		fbGetVelocityLimitMin(sNetId := sNetID,
					nSlaveAddr := nSlaveAddr,
					nSubIndex := 1, //v_min
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMin),
					cbBufLen := SIZEOF(nVelocityLimitMin),
					bExecute := bGetVelocityLimitMin);
		
		IF fMinFlag.Q THEN
			IF nTargetVelocity < nVelocityLimitMin THEN
				nTargetVelocity := nVelocityLimitMin;
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Velocity exceeds limit: Minimum limit was set',
					strArg := '');
			ELSIF nTargetVelocity > nVelocityLimitMax THEN
				nTargetVelocity := nVelocityLimitMax;
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Velocity exceeds limit: Maximum limit was set',
					strArg := '');
			END_IF
			bGetVelocityLimitMin := FALSE;
			eMotionState := SET_VELOCITY;
		END_IF
	
	SET_VELOCITY:
		//set velocity
		bWriteToFB := TRUE;
		fbSetVelocity(sNetId := sNetID,
					nSlaveAddr := nSlaveAddr,
					nSubIndex := 0,
					nIndex := 16#6042,
					pSrcBuf := ADR(nTargetVelocity),
					cbBufLen := SIZEOF(nTargetVelocity),
					bExecute := bWriteToFB);

		fFlag(CLK := fbSetVelocity.bBusy); //falling edge at acknowledge of FB
		
		IF fbSetVelocity.bError THEN
			//Error when setting Target Velocity
			bSuccess := FALSE;
			bWriteToFB := FALSE;
			ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Error in set velocity',
				strArg := '');
			eMotionState := WAIT_FOR_TRIGGER;
		END_IF
		IF fFlag.Q THEN
			ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Validate Velocity',
				strArg := '');
			bWriteToFB := FALSE;
			eMotionState := VALIDATE_VELOCITY;
		END_IF
		
	VALIDATE_VELOCITY:
		bGetStatusword := TRUE;
		fbGetStatusword(sNetId := sNetId,
			nSlaveAddr := nSlaveAddr,
			nIndex := 16#6041,
			nSubIndex := 0,
			pDstBuf := ADR(nStatusword),
			cbBufLen := SIZEOF(nStatusword),
			bExecute := bGetStatusword);
		fFlag(CLK := fbGetStatusword.bBusy);
		IF fFlag.Q THEN
			IF nStatusword.4 THEN
				bGetStatusword := FALSE;
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
				msgFmtStr := 'Velocity is valid',
				strArg := '');
			ELSE 
				bWriteToFB := FALSE;
				bSuccess := FALSE;
				ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_HINT,
					msgFmtStr := 'Error when validating velocity',
					strArg := '');
			END_IF
			bGetStatusword := FALSE;
			eMotionState := WAIT_FOR_TRIGGER;
		END_IF
		
END_CASE

]]></ST>
    </Implementation>
    <Method Name="GetVMaxLimit" Id="{1b54dcad-bb7a-47f5-b5b5-5e96cd90dd6c}">
      <Declaration><![CDATA[METHOD GetVMaxLimit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbGetVelocityLimitMax(sNetId := sNetID,
					nSlaveAddr := nSlaveAddr,
					nSubIndex := 2, //v_max
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMax),
					cbBufLen := SIZEOF(nVelocityLimitMax),
					bExecute := TRUE);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVMinLimit" Id="{697c1f52-4f80-4637-ac85-fa25509ff6a5}">
      <Declaration><![CDATA[METHOD GetVMinLimit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbGetVelocityLimitMin(sNetId := sNetID,
					nSlaveAddr := nSlaveAddr,
					nSubIndex := 1, //v_min
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMin),
					cbBufLen := SIZEOF(nVelocityLimitMin),
					bExecute := TRUE);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="VelocityMode">
      <LineId Id="1313" Count="0" />
      <LineId Id="1312" Count="0" />
      <LineId Id="1081" Count="29" />
      <LineId Id="1279" Count="1" />
      <LineId Id="1111" Count="0" />
      <LineId Id="1290" Count="0" />
      <LineId Id="1304" Count="5" />
      <LineId Id="1125" Count="0" />
      <LineId Id="1128" Count="1" />
      <LineId Id="1282" Count="1" />
      <LineId Id="1298" Count="5" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1276" Count="0" />
      <LineId Id="1130" Count="10" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1277" Count="0" />
      <LineId Id="1143" Count="10" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1155" Count="4" />
      <LineId Id="1229" Count="2" />
      <LineId Id="1160" Count="6" />
      <LineId Id="1265" Count="0" />
      <LineId Id="1167" Count="25" />
      <LineId Id="1266" Count="0" />
      <LineId Id="1193" Count="4" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="VelocityMode.GetVMaxLimit">
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="VelocityMode.GetVMinLimit">
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>