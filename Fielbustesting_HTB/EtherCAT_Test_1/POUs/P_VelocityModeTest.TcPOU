<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="P_VelocityModeTest" Id="{20dbc57a-bcdc-4d5e-be58-5c2d209d0155}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_VelocityModeTest
VAR
	fbVelocityMode					: VelocityMode;
	fbGetStatusword					: FB_EcCoeSdoRead;
	fbGetActualVelocity				: FB_EcCoeSdoRead;
	fbGetVelocityLimitMax			: FB_EcCoeSdoRead;
	fbGetVelocityLimitMin			: FB_EcCoeSdoRead;
	nTargetVelocity					: DINT := 50; //rpm
	nActualVelocity					: DINT;
	nVelocityLimitMax				: DINT;
	nVelocityLimitMin				: DINT;
	nStatusword						: UINT;
	
	bGetActualVelocity				: BOOL;
	fActualVelocityRead				: F_TRIG;
	fStatusWordRead					: F_TRIG;
	
	tWaitForCurrentVelocity			: TON;
	bGetCurrentVelocity				: BOOL;
	tGetStatusword					: TON;
	bGetStatusword					: BOOL;
	nTargetVelocityAfterLimit: DINT;
END_VAR

VAR
	bSetVelocity					: BOOL; 
	bStopMotor						: BOOL;
	bSetControlWord					: BOOL := TRUE;
END_VAR

//test case variables
VAR
	bTestBasicOperation				: BOOL;
	eTestMode	: (BASIC_OPERATION, LIMIT_TESTING); 
END_VAR

//test case success indication variables
VAR
	bTestBasicOperation_Success		: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[tWaitForCurrentVelocity(IN := bGetCurrentVelocity,
							PT := T#10MS);
tGetStatusword(IN := bGetStatusword,
					PT := T#500MS);	
							
IF tWaitForCurrentVelocity.Q THEN
	bGetCurrentVelocity := FALSE;
ELSE
	bGetCurrentVelocity := TRUE;		
END_IF
// read FBs
fbGetStatusword(sNetId := GVL.sNetId,
				nSlaveAddr := GVL.nSlaveAddr,
				nIndex := 16#6041,
				nSubindex := 0,
				pDstBuf := ADR(nStatusWord),
				cbBufLen := SIZEOF(nStatusWord),
				bExecute := bGetStatusword);
				
fbGetActualVelocity(sNetId := GVL.sNetId,
					nSlaveAddr := GVL.nSlaveAddr,
					nIndex := 16#6044,
					nSubindex := 0,
					pDstBuf := ADR(nActualVelocity),
					cbBufLen := SIZEOF(nActualVelocity),
					bExecute := bGetCurrentVelocity);

//write to motor
MAIN.Controlword.4 := bSetControlWord; //velocity demand value shall equal to ramp output value
MAIN.Controlword.5 := bSetControlWord; //ramp output value shall follow ramp input value
MAIN.Controlword.6 := bSetControlWord; //ramp input value shall accord with ramp reference

			
//stop
IF bStopMotor THEN
	MAIN.Controlword := 0;
END_IF


(*TEST SUITE*)
CASE eTestMode OF
	//Test basic operation
	BASIC_OPERATION:
		nTargetVelocity := 300; //rpm
		bSetVelocity := TRUE;
		fbVelocityMode(sNetID := GVL.sNetId,
					nSlaveAddr := GVL.nSlaveAddr,
					nTargetVelocity := nTargetVelocity,
					bSetVelocity := bSetVelocity,
					nTargetVelocityAfterLimit => nTargetVelocityAfterLimit);
		IF NOT fbVelocityMode.bBusy THEN
			//now velocity is set
			IF nActualVelocity = nTargetVelocityAfterLimit THEN
				// Vsoll = Vist
				bTestBasicOperation_Success := TRUE;
				bTestBasicOperation := FALSE;
				MAIN.Controlword := 0;
			END_IF
		END_IF 


	//Test velocity limtis
	LIMIT_TESTING: 
		//get limits
		fbGetVelocityLimitMax(sNetId := GVL.sNetID,
					nSlaveAddr := GVL.nSlaveAddr,
					nSubIndex := 2, //v_max
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMax),
					cbBufLen := SIZEOF(nVelocityLimitMax),
					bExecute := TRUE);
		fbGetVelocityLimitMin(sNetId := GVL.sNetID,
					nSlaveAddr := GVL.nSlaveAddr,
					nSubIndex := 1, //v_min
					nIndex := 16#6046, 
					pDstBuf := ADR(nVelocityLimitMin),
					cbBufLen := SIZEOF(nVelocityLimitMin),
					bExecute := TRUE);

		



END_CASE













]]></ST>
    </Implementation>
    <LineIds Name="P_VelocityModeTest">
      <LineId Id="949" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="952" Count="3" />
      <LineId Id="948" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="862" Count="6" />
      <LineId Id="875" Count="0" />
      <LineId Id="869" Count="5" />
      <LineId Id="824" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="898" Count="0" />
      <LineId Id="909" Count="2" />
      <LineId Id="1018" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="918" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="966" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="991" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="988" Count="2" />
      <LineId Id="986" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="993" Count="1" />
      <LineId Id="997" Count="1" />
      <LineId Id="1003" Count="0" />
      <LineId Id="1015" Count="1" />
      <LineId Id="999" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="972" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="1045" Count="13" />
      <LineId Id="1043" Count="1" />
      <LineId Id="1036" Count="0" />
      <LineId Id="1022" Count="7" />
      <LineId Id="1019" Count="0" />
      <LineId Id="975" Count="3" />
      <LineId Id="965" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="827" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>